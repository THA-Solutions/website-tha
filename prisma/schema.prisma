generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model User {
  id            String    @id @default(cuid())
  firstName     String?   @db.VarChar(25)
  lastName      String?   @db.VarChar(25)
  email         String?   @unique
  emailVerified DateTime?
  password      String?   @db.VarChar(500)
  role          String    @default("user") @db.VarChar(10)

  @@map("user")
}

model Article {
  id       String   @id @default(cuid())
  title    String   @db.VarChar(255)
  subTitle String   @db.VarChar(500)
  content  String   @db.Text
  pubDate  DateTime @default(now()) @db.Timestamp(0)
  author   String   @db.VarChar(50)
  category String   @db.VarChar(20)

  @@map("article")
}

model Brand {
  id        String     @id @default(cuid())
  name      String     @db.VarChar(100)
  inverters Inverter[]

  @@map("brand")
}

model Inverter {
  id                                    String  @id @default(cuid())
  id_brand                              String
  title                                 String  @db.VarChar(100)
  cc_voltage                            String  @db.VarChar(100)
  mppt_voltage_range                    String  @db.VarChar(100)
  max_input_current                     String  @db.VarChar(100)
  max_short_circuit_current_per_tracker String  @db.VarChar(100)
  num_mppt                              Int
  max_output_current                    String  @db.VarChar(100)
  ca_nominal_power_range                String  @db.VarChar(100)
  adjustable_power_factor               String  @db.VarChar(100)
  thdi                                  String  @db.VarChar(100)
  max_efficiency                        String  @db.VarChar(100)
  european_efficiency                   String  @db.VarChar(100)
  mppt_efficiency                       String  @db.VarChar(100)
  cc_reverse_polarity_protection        String  @db.VarChar(100)
  cc_switch                             String  @db.VarChar(100)
  cc_surge_protection                   String  @db.VarChar(100)
  output_overcurrent_protection         String  @db.VarChar(100)
  ac_overvoltage_protection             String  @db.VarChar(100)
  ground_fault_monitoring               String  @db.VarChar(100)
  dimensions                            String  @db.VarChar(100)
  weight                                String  @db.VarChar(100)
  operating_temperature_range           String  @db.VarChar(100)
  nighttime_power_consumption           String  @db.VarChar(100)
  cooling                               String  @db.VarChar(100)
  protection_degree                     String  @db.VarChar(100)
  warranty                              String  @db.VarChar(100)
  network_monitoring                    String? @db.VarChar(100)
  brand                                 Brand   @relation(fields: [id_brand], references: [id], onDelete: Cascade)

  @@index([id_brand], map: "inverter_FK")
  @@map("inverter")
}

model Review {
  id          String   @id @default(cuid())
  value       Int?
  comment     String?  @db.VarChar(500)
  id_inverter String
  id_user     String
  date        DateTime @default(now()) @db.Timestamp(0)

  @@map("review")
}

model Image {
  id        String  @id @default(cuid())
  id_origem String
  url       String  @unique @db.VarChar(500)
  alt       String? @db.VarChar(500)
  source    String? @db.VarChar(500)
  pos       Int     @default(0)

  @@map("image")
}

model Team {
  id          String  @id @default(cuid())
  name        String  @db.VarChar(100)
  role        String  @db.VarChar(100)
  image       String? @db.VarChar(500)
  order       Int?    @default(0)
  linkedin    String? @db.VarChar(500)
  instagram   String? @db.VarChar(500)
  description String? @db.VarChar(500)

  @@map("team")
}
